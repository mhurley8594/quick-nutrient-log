{"version":3,"sources":["components/TotalHeader.js","components/TotalHeaderList.js","components/DashboardDatePicker.js","components/LogTable.js","components/Dashboard.js","components/LogForm.js","components/NavBar.js","App.js","serviceWorker.js","index.js"],"names":["TotalHeader","props","react_default","a","createElement","label","count","TotalHeaderList","class","Component","DashboardDatePicker","for","id","type","LogTable","App","components_TotalHeaderList","components_DashboardDatePicker","components_LogTable","LogForm","name","Link","to","className","NavBar","BrowserRouter","components_NavBar","Switch","Route","exact","path","component","Dashboard","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5c0288ca.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function TotalHeader(props) {\r\n    return (\r\n        <div>\r\n            <h2>{props.label}</h2>\r\n            <p>{props.count}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react';\r\nimport TotalHeader from './TotalHeader';\r\n\r\nclass TotalHeaderList extends Component {\r\n    render() {\r\n        return (\r\n            <div class=\"row\">\r\n                <div class=\"col\">\r\n                    <TotalHeader label=\"kCal\" count={120} />\r\n                </div>\r\n                <div class=\"col\">\r\n                    <TotalHeader label=\"Protein\" count={15} />\r\n                </div>\r\n                <div class=\"col\">\r\n                    <TotalHeader label=\"Fat\" count={4} />\r\n                </div>\r\n                <div class=\"col\">\r\n                    <TotalHeader label=\"Carb\" count={7} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TotalHeaderList;\r\n","import React, { Component } from 'react';\r\n\r\nclass DashboardDatePicker extends Component {\r\n  render() {\r\n    return (\r\n      <div class=\"form-group\">\r\n        <label for=\"datepicker\">\r\n          Date:\r\n        </label>\r\n        <input class=\"form-control\" id=\"datepicker\" type=\"date\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DashboardDatePicker;","import React, { Component } from 'react';\r\n\r\nclass LogTable extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <table class=\"table table-dark\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Date</th>\r\n                            <th>Food</th>\r\n                            <th>Grams</th>\r\n                            <th>kCal</th>\r\n                            <th>Protein</th>\r\n                            <th>Fat</th>\r\n                            <th>Carb</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>06-11-2018</td>\r\n                            <td>String Cheese</td>\r\n                            <td>60</td>\r\n                            <td>120</td>\r\n                            <td>15</td>\r\n                            <td>4</td>\r\n                            <td>7</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LogTable;\r\n","import React, { Component } from 'react';\r\nimport TotalHeaderList from './TotalHeaderList';\r\nimport DashboardDatePicker from './DashboardDatePicker';\r\nimport LogTable from './LogTable';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <TotalHeaderList />\r\n        <DashboardDatePicker />\r\n        <LogTable />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React, { Component } from 'react';\r\nimport TotalHeaderList from './TotalHeaderList';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass LogForm extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <TotalHeaderList />\r\n                <form>\r\n                    <div class=\"form-group\">\r\n                        <label for=\"date\">Date</label>\r\n                        <input id=\"date\" name=\"date\" type=\"date\" class=\"form-control\" />\r\n                    </div>\r\n                    <div class=\"form-group\">\r\n                        <label for=\"food\">Food</label>\r\n                        <input id=\"food\" name=\"food\" type=\"text\" class=\"form-control\" />\r\n                    </div>\r\n                    <div class=\"form-group\">\r\n                        <label for=\"grams\">Grams</label>\r\n                        <input id=\"grams\" name=\"grams\" type=\"number\" class=\"form-control\" />\r\n                    </div>\r\n                    <button class=\"btn btn-primary\">\r\n                        Add Log\r\n                    </button>\r\n                    <Link to=\"/\" className=\"btn\">Cancel</Link>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LogForm;\r\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass NavBar extends Component {\r\n    render() {\r\n        return (\r\n            <nav class=\"navbar navbar-expand-sm navbar-dark bg-dark\">\r\n                <Link to=\"/\" className=\"navbar-brand\">Nutrient Log</Link>\r\n                <div class=\"navbar-nav\">\r\n                    <div class=\"nav-item\">\r\n                        <Link to=\"/add\" className=\"nav-link\">Add Log</Link>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NavBar;\r\n","import React, { Component } from 'react';\nimport {\n  BrowserRouter,\n  Route,\n  Switch,\n} from 'react-router-dom';\nimport Dashboard from './components/Dashboard';\nimport LogForm from './components/LogForm';\nimport NavBar from './components/NavBar';\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div>\n          <NavBar />\n          <div class=\"container-fluid\">\n            <Switch>\n              <Route exact={true} path=\"/\" component={Dashboard} />\n              <Route exact={true} path=\"/add\" component={LogForm} />\n            </Switch>\n          </div>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}